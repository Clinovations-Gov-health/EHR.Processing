{"version":3,"sources":["components/GenericInput.tsx","components/Header.tsx","components/GenericQueryButton.tsx","components/BasicUserInfo.tsx","components/IndividualQuery.tsx","components/FamilyQuery.tsx","components/PatientEHRSumm.tsx","components/PatientData.tsx","components/Plan.tsx","components/PlansList.tsx","components/Main.tsx","App.tsx","index.tsx"],"names":["GenericInput","props","state","value","label","handleChange","bind","event","target","this","setState","onInput","placeholder","onChange","React","Header","handleZipcodeInput","zipCode","GenericButton","onClick","onSelect","field","choice1","choice2","BasicUserInfo","handleTargetSelect","choice","toLowerCase","console","log","onDataInput","GenericQueryButton","IndividualQuery","usesTobacco","handleDOB","handleSelect","DOB","length","birthDate","Date","curDate","years","getFullYear","getMonth","getDate","age","FamilyQuery","handleNumChildren","handleHasSpouse","num","parseInt","status","PatientEHRSumm","isCorrect","numPCP","numSpec","displayEHRData","handleEdit","readOnly","type","id","EHRSum","handleConfirm","samples","PatientData","data","market","demographic","encounters","procedures","hasSpouse","numChildren","name","EHRisLoaded","handleData","handleSubmit","getPatientData","handleFhirButtonSelect","patientEncounters","patientProcedures","JSON","stringify","undefined","axios","get","res","resultData","handleBenefitsResults","key","FHIR","oauth2","authorize","iss","scope","EHRSummary","targetInfo","displayTargetInfo","Plan","cost","total","plan","deductible","outOfPocket","maximumOutOfPocket","PlanList","results","map","Main","isLoaded","plansIsLoaded","handleEHRSummary","plansSummary","PlansList","onSubmit","App","className","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e81548cc.chunk.js","sourcesContent":["import * as React from 'react';\n\nexport interface GenericInputProps {\n    onInput: (value: string) => void,\n}\n \nexport interface GenericInputState {\n    value: string,\n    label: string,\n}\n \nclass GenericInput extends React.Component<GenericInputProps, GenericInputState> {\n    constructor(props: GenericInputProps) {\n        super(props);\n        this.state = {\n            value: '',\n            label: '',\n        };\n        this.handleChange = this.handleChange.bind(this);\n    }\n\n    handleChange(event: any) { \n        const value = event.target.value;\n        this.setState({ value });\n        this.props.onInput(value);\n    }\n\n    render() { \n        return ( \n            <div>\n                <input\n                    value={this.state.value}\n                    placeholder={this.state.label}\n                    onChange={this.handleChange}\n                />\n            </div>\n         );\n    }\n}\n \nexport default GenericInput;","import * as React from 'react';\nimport GenericInput from './GenericInput';\n\nexport interface HeaderProps {\n    children?: React.ReactNode,\n    onInput: (zipCode: string) => void,\n}\n \nexport interface HeaderState {\n    \n}\n \nclass Header extends React.Component<HeaderProps, HeaderState> {\n    constructor(props: HeaderProps) {\n        super(props);\n        this.state = {  };\n        this.handleZipcodeInput = this.handleZipcodeInput.bind(this);\n    }\n    \n    handleZipcodeInput(zipCode: string) { \n        this.setState({ zipCode });\n        this.props.onInput(zipCode);\n    }\n\n    //handles changes to the zipcode input\n\n    render() { \n        return ( \n            <div>  \n            <h1>Pick Health Plans</h1>\n            {/* <h3>Choosing health plans designed for you</h3> */}\n            <GenericInput \n                onInput={this.handleZipcodeInput}\n            />\n            </div>\n         );\n    }\n}\n \nexport default Header;","import * as React from 'react';\n\nexport interface GenericQueryButtonProps {\n    onSelect: (choice: string, field: string) => void;\n    choice1: string;\n    choice2: string;\n    field: string;\n}\n \nexport interface GenericQueryButtonState {\n    \n}\n \nclass GenericButton extends React.Component<GenericQueryButtonProps, GenericQueryButtonState> {\n    constructor(props: GenericQueryButtonProps) {\n        super(props);\n        this.state = {};\n    }\n    render() { \n        return ( \n            <div>\n            <button onClick={() => this.props.onSelect(this.props.field, this.props.choice1)}> {this.props.choice1} </button>\n            <button onClick={() => this.props.onSelect(this.props.field, this.props.choice2)}> {this.props.choice2} </button>\n            </div>\n         );\n    }\n}\n \nexport default GenericButton;","import * as React from 'react';\nimport GenericQueryButton from './GenericQueryButton'\n\n\nexport interface BasicUserInfoProps {\n    onDataInput: (key: string, value: any) => void,\n}\n \nexport interface BasicUserInfoState {\n    \n}\n \nclass BasicUserInfo extends React.Component<BasicUserInfoProps, BasicUserInfoState> {\n    constructor(props: BasicUserInfoProps) {\n        super(props);\n        this.state = {  };\n        this.handleTargetSelect = this.handleTargetSelect.bind(this);\n    }\n\n    handleTargetSelect(field: string, choice: string) { \n        choice = choice.toLowerCase();\n        console.log(choice);\n        this.props.onDataInput(\"target\", choice);\n    }\n\n    render() { \n        return ( \n            <div>\n                <h5>Are you seeking a family or individual plan?</h5>\n                <GenericQueryButton onSelect={this.handleTargetSelect} choice1=\"Individual\" choice2=\"Family\" field=\"target\"/>\n            </div>\n         );\n    }\n}\n \nexport default BasicUserInfo;","import * as React from 'react';\nimport GenericInput from './GenericInput';\nimport GenericQueryButton from './GenericQueryButton';\n\nexport interface IndividualQueryProps {\n    onDataInput: (key: string, value: any) => void,\n}\n \nexport interface IndividualQueryState {\n    usesTobacco: boolean,\n}\n \nclass IndividualQuery extends React.Component<IndividualQueryProps, IndividualQueryState> {\n    constructor(props: IndividualQueryProps) {\n        super(props);\n        this.state = { \n            usesTobacco: false,\n         };\n        this.handleDOB = this.handleDOB.bind(this);\n        this.handleSelect = this.handleSelect.bind(this);\n    }\n\n    handleDOB(DOB: string) { \n        if (DOB.length === 10) {\n            //age conversion here and send age to handleData\n            let birthDate = new Date(DOB);\n            let curDate = new Date();\n\n            var years = (curDate.getFullYear() - birthDate.getFullYear());\n\n            if (curDate.getMonth() < birthDate.getMonth() || \n                (curDate.getMonth() === birthDate.getMonth() && curDate.getDate() < birthDate.getDate())) {\n                years--;\n            }\n            \n            let age = years;\n            this.props.onDataInput(\"age\", age);\n        }\n    }\n\n    handleSelect(choice: string) { \n        if (choice === 'Yes') { \n            this.setState({ usesTobacco: true });\n        }\n        else { \n            this.setState({ usesTobacco: false });\n        }\n        this.props.onDataInput(\"usesTobacco\", this.state.usesTobacco);\n    }\n\n    render() { \n        return ( \n            <div>\n                <p>Enter your date of birth:</p>\n                <GenericInput\n                    onInput={this.handleDOB}\n                />\n                <p>Do you currently use Tobacco?</p>\n                <GenericQueryButton onSelect={this.handleSelect} choice1=\"Yes\" choice2=\"No\" field=\"usesTobacco\"\n                />\n            </div>\n         );\n    }\n}\n \nexport default IndividualQuery;","import * as React from 'react';\nimport GenericQueryButton from './GenericQueryButton';\nimport GenericInput from './GenericInput';\n\nexport interface FamilyQueryProps {\n    onDataInput: (key: string, value: any) => void,\n}\n \nexport interface FamilyQueryState {\n    \n}\n \nclass FamilyQuery extends React.Component<FamilyQueryProps, FamilyQueryState> {\n    constructor(props: FamilyQueryProps) {\n        super(props);\n        this.state = {\n\n        };\n        this.handleNumChildren = this.handleNumChildren.bind(this);\n        this.handleHasSpouse = this.handleHasSpouse.bind(this);\n    }\n\n    handleNumChildren(num: any) { \n        num = parseInt(num, 10);\n        this.props.onDataInput(\"numChildren\", num);\n    }\n\n    handleHasSpouse(field: string, choice: string) { \n        let status: boolean = false;\n        if (choice === 'Yes') { \n            status = true;\n        }\n        this.props.onDataInput(field, status);\n    }\n    \n    render() { \n        return ( \n            <div>\n                <p>Are you currently married?</p>\n                <GenericQueryButton onSelect={this.handleHasSpouse} choice1=\"Yes\" choice2=\"No\" field=\"hasSpouse\"\n                />\n                <p>Input number of dependents</p>\n                <GenericInput\n                    onInput={this.handleNumChildren}\n                />\n            </div>\n         );\n    }\n}\n \nexport default FamilyQuery;","import * as React from 'react';\nimport {PatientEncounter} from '../payload';\n \nexport interface PatientEHRSummProps {\n    encounters?: PatientEncounter[]\n}\n \nexport interface PatientEHRSummState {\n    isCorrect: boolean,\n    numPCP: number,\n    numSpec: number,\n}\n \nclass PatientEHRSumm extends React.Component<PatientEHRSummProps, PatientEHRSummState> {\n    constructor(props: PatientEHRSummProps) {\n        super(props);\n        this.state = { \n            isCorrect: true,\n            numPCP: 1,\n            numSpec: 2,\n        };\n        this.displayEHRData = this.displayEHRData.bind(this);\n        this.handleEdit = this.handleEdit.bind(this);\n    }\n\n\n    displayEHRData() { \n        let EHRSum;\n        if (this.state.isCorrect === false) { \n                EHRSum = \n                <div>\n                    <h5>Here is you healthcare utilization over the past year: </h5>\n                    Number of PCP visits: <input type=\"text\" ></input> <br></br>\n                    Number of Specialist visits: <input type=\"text\" ></input> <br></br>\n                </div>     \n            }\n\n        else {\n            return (\n            <div>\n                <h5>Here is you healthcare utilization over the past year: </h5>\n                Number of PCP visits: <input readOnly type=\"text\" id=\"numVisits\" value={this.state.numPCP}></input> <br></br>\n                Number of Specialist visits: <input readOnly type=\"text\" id=\"numVisits\" value={this.state.numSpec}></input> <br></br>\n            </div>\n            )   \n        }\n        return EHRSum; \n    }\n\n    handleEdit() { \n        this.setState({ isCorrect: false });\n    }\n\n    handleConfirm() { \n        \n    }\n    \n    render() { \n        let EHRSum = this.displayEHRData();\n        return ( \n            <div>\n                {EHRSum}\n                <button onClick={this.handleEdit}> Edit </button>\n                <button onClick={this.handleConfirm}> Confirm </button>\n            </div>\n         );\n    }\n}\n \nexport default PatientEHRSumm;","import * as React from 'react';\nimport { IRecommendationEHRData, PatientEncounter, PatientProcedure } from '../payload';\nimport BasicUserInfo from './BasicUserInfo';\nimport IndividualQuery from './IndividualQuery';\nimport FamilyQuery from './FamilyQuery';\nimport PatientEHRSumm from './PatientEHRSumm';\nimport GenericButton from './GenericQueryButton';\nimport FHIR from 'fhirclient';\nimport https from 'https';\nimport axios from 'axios';\n\nexport interface PatientDataProps {\n    zipCode: string,\n    onSubmit: (isLoaded: boolean) => void,\n    handleBenefitsResults: (results: any) => void,\n}\n \nexport interface PatientDataState {\n    data: IRecommendationEHRData,\n    name: string,\n    zipCode: string,\n    EHRisLoaded: boolean,\n}\n \nlet samples = { \n    \"patientEncounters\": [\n        { \n            \"participants\": [],\n            \"period\": { \n                \"end\": \"2019-10-02T11:32:43-04:00\",\n                \"start\": \"2019-10-02T11:02:43-04:00\"\n            },\n            \"type\": [ \n                {\n                    \"coding\": [\n                        { \n                            \"code\": \"185345009\",\n                            \"display\": \"Encounter for symptom\",\n                            \"system\": \"cpt\"\n                        }\n                    ]\n                }\n            ],\n            \"class\": { \n                \"code\": \"WELLNESS\"\n            }\n        },\n\n        { \n            \"participants\": [],\n            \"period\": { \n                \"end\": \"2019-10-02T11:32:43-04:00\",\n                \"start\": \"2019-10-02T11:02:43-04:00\"\n            },\n            \"type\": [ \n                {\n                    \"coding\": [\n                        { \n                            \"code\": \"185349003\",\n                            \"display\": \"Encounter for check up\",\n                            \"system\": \"cpt\"\n                        }\n                    ]\n                }\n            ],\n            \"class\": { \n                \"code\": \"WELLNESS\"\n            }\n        },\n\n        { \n            \"participants\": [],\n            \"period\": { \n                \"end\": \"2019-10-02T11:32:43-04:00\",\n                \"start\": \"2019-10-02T11:02:43-04:00\"\n            },\n            \"type\": [ \n                {\n                    \"coding\": [\n                        { \n                            \"code\": \"50849002\",\n                            \"display\": \"Emergency room admission\",\n                            \"system\": \"cpt\"\n                        }\n                    ]\n                }\n            ],\n            \"class\": { \n                \"code\": \"WELLNESS\"\n            }\n        },\n\n        { \n            \"participants\": [],\n            \"period\": { \n                \"end\": \"2019-10-02T11:32:43-04:00\",\n                \"start\": \"2019-10-02T11:02:43-04:00\"\n            },\n            \"type\": [ \n                {\n                    \"coding\": [\n                        { \n                            \"code\": \"185349003\",\n                            \"display\": \"Encounter for check up\",\n                            \"system\": \"cpt\"\n                        }\n                    ]\n                }\n            ],\n            \"class\": { \n                \"code\": \"WELLNESS\"\n            }\n        }\n    ],\n\n    \"patientProcedures\": [\n        { \n            \"period\": { \n                \"end\": \"2019-10-02T11:32:43-04:00\",\n                \"start\": \"2019-10-02T11:02:43-04:00\"\n            },\n            \"coding\": {\n                \"encoding\": [{ \n                    \"code\": \"1225002\",\n                    \"display\": \"Upper arm X-Ray\",\n                    \"system\": \"cpt\"\n                }]\n            },\n            \"encounterContext\": { \n                \"reference\": \"reference\"\n            }\n        }\n    ]\n}\n\n//define interface for the data that is to be exported\nclass PatientData extends React.Component<PatientDataProps, PatientDataState> {\n    constructor(props: PatientDataProps) {\n        super(props);\n        var collectedData: IRecommendationEHRData = \n        { market: 'individual',\n         demographic: 'adult',\n         target: '',\n         zipCode: '',\n         encounters: [],\n         procedures: [],\n         age: 0,\n         usesTobacco: false,\n         hasSpouse: false,\n         numChildren: 0\n        }\n        this.state = {\n            data: collectedData,\n            name: '',\n            zipCode: '',\n            EHRisLoaded: false,\n        };\n        this.handleData = this.handleData.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n        this.getPatientData = this.getPatientData.bind(this);\n        this.handleFhirButtonSelect = this.handleFhirButtonSelect.bind(this);\n    };\n\n    \n    async handleSubmit() { \n        try {\n            let data;\n            if (this.state.data.target === 'individual') { \n                data = {\n                    market: this.state.data.market,\n                    demographic: this.state.data.demographic,\n                    target: this.state.data.target,\n                    zipCode: this.state.data.zipCode,\n                    encounters: this.state.data.encounters,\n                    procedures: this.state.data.procedures,\n                    age: this.state.data.age,\n                    usesTobacco: this.state.data.usesTobacco\n                };\n            }\n            else { \n                data = { \n                    market: this.state.data.market,\n                    demographic: this.state.data.demographic,\n                    target: this.state.data.target,\n                    zipCode: this.state.data.zipCode,\n                    encounters: this.state.data.patientEncounters,\n                    procedures: this.state.data.patientProcedures,\n                    hasSpouse: this.state.data.hasSpouse,\n                    numChildren: this.state.data.numChildren\n                };\n            }\n            console.log(JSON.stringify(data, undefined, 4));\n            const res = await axios.get(`http://localhost:4000/plan/recommendation?data=${JSON.stringify(data)}`);\n            const resultData = res.data;\n            this.props.handleBenefitsResults(resultData);\n            console.log(resultData);\n        } catch (e) {\n            console.log(e);\n            return 1;\n        }\n    }\n\n    handleData(key: string, value: any) { \n        let cur = this.state.data;\n        let data: IRecommendationEHRData = cur;\n        data[key] = value;\n        this.setState({ data });\n    }\n\n    displayTargetInfo() { \n        if (this.state.data.target === 'individual') { \n            return <IndividualQuery onDataInput={this.handleData}/>;\n        }\n        if (this.state.data.target === 'family') { \n            return <FamilyQuery onDataInput={this.handleData}/>;\n        }\n    }\n\n    getPatientData() { \n        let encounters: PatientEncounter[] = samples.patientEncounters;\n        var procedures: PatientProcedure[] = samples.patientProcedures;\n        let data = this.state.data;\n        data.encounters = encounters;\n        data.procedures = procedures;\n        this.setState({ data }); \n    }\n\n    async handleFhirButtonSelect(field: string, choice: string) {\n        switch (choice) {\n            case 'Cerner':\n                const res = await FHIR.oauth2.authorize({\n                    iss: \"https://fhir.epic.com/interconnect-fhir-oauth/api/FHIR/DSTU2\",\n                    scope: \"patient/*.read\",\n                });\n\n                console.log(res);\n\n        }\n        this.setState({ EHRisLoaded: true });\n    }\n\n    render() { \n        let EHRSummary; \n        if (this.state.EHRisLoaded === true) { \n            EHRSummary = <PatientEHRSumm />;\n        }\n\n        if (this.state.data.zipCode !== this.props.zipCode) { \n            this.handleData(\"zipCode\", this.props.zipCode);\n        }\n        let targetInfo = this.displayTargetInfo();\n        return ( \n            <div>\n            <BasicUserInfo onDataInput={this.handleData}/>\n            {targetInfo}\n            <h5>Does your healthcare provider use Epic or Cerner?</h5>\n            <GenericButton onSelect={this.handleFhirButtonSelect} choice1=\"Epic\" choice2=\"Cerner\" field=\"FhirProvider\">\n            </GenericButton>\n            {EHRSummary}\n            <br></br>\n            <button onClick={this.handleSubmit}> Search Plans Now </button>\n            </div>\n         );\n    }\n}\n \nexport default PatientData;","import * as React from 'react';\nimport UserBenefits from './UserBenefits';\n\nexport interface PlanProps {\n    plan: any,\n}\n \nexport interface PlanState {\n    name: string,\n    cost: number, \n    total: number,\n}\n \nclass Plan extends React.Component<PlanProps, PlanState> {\n    constructor(props: PlanProps) {\n        super(props);\n        this.state = {\n            name: '',\n            cost: 0,\n            total: 0,\n         };\n    }\n    render() { \n        return ( \n            <React.Fragment>\n                <h5>{this.props.plan.name} </h5>\n                <p>Estimated Cost: {this.props.plan.deductible + this.props.plan.cost * 12 + this.props.plan.outOfPocket} </p>\n                <p>Out of Pocket Max: {this.props.plan.maximumOutOfPocket} </p>\n                {/* <UserBenefits benefits={this.props.plan.benefits} /> */}\n            </React.Fragment>\n         );\n    }\n}\n \nexport default Plan;","import * as React from 'react';\nimport Plan from './Plan';\n\nexport interface PlanListProps {\n    results: any,\n}\n \nexport interface PlanListState {\n    \n}\n \nclass PlanList extends React.Component<PlanListProps, PlanListState> {\n    constructor(props: PlanListProps) {\n        super(props);\n        this.state = { \n\n         };\n    }\n    render() { \n        \n        return ( \n            <div>\n                {this.props.results.map((plan: any) => { \n                    return <Plan plan={plan} />\n                })}\n            </div>\n         );\n    }\n}\n \nexport default PlanList;","import * as React from 'react';\nimport Header from './Header';\nimport PatientData from './PatientData';\nimport GenericInput from './GenericInput';\nimport PlansList from './PlansList';\n\nexport interface MainProps {\n    \n}\n \nexport interface MainState {\n    zipCode: string,\n    isLoaded: boolean,\n    results: any,\n    plansIsLoaded: boolean,\n}\n\n \nclass Main extends React.Component<MainProps, MainState> {\n    constructor(props: MainProps) {\n        super(props);\n        this.state = {\n            zipCode : '',\n            isLoaded: false,\n            results: {},\n            plansIsLoaded: false, \n        };\n\n        this.handleZipcodeInput = this.handleZipcodeInput.bind(this);\n        this.handleEHRSummary = this.handleEHRSummary.bind(this);\n        this.handleBenefitsResults = this.handleBenefitsResults.bind(this);\n    }\n    \n    handleZipcodeInput(zipCode: string) { \n        this.setState({ zipCode });\n    }\n\n    handleEHRSummary(isLoaded: boolean) { \n        this.setState({ isLoaded });\n    }\n\n    handleBenefitsResults(results: any) { \n        this.setState({ results });\n        this.setState({ plansIsLoaded: true});\n    }\n\n    render() { \n        let plansSummary; \n        if (this.state.plansIsLoaded === true) {\n            plansSummary = <PlansList results = {this.state.results}/>\n        }\n\n        return ( \n            <div>\n            <Header onInput={this.handleZipcodeInput}/>\n            <PatientData zipCode={this.state.zipCode} onSubmit={this.handleEHRSummary} handleBenefitsResults={this.handleBenefitsResults}/>\n            {plansSummary}\n            </div>\n         );\n    }\n}\n \nexport default Main;","import React from 'react';\nimport './App.css';\nimport Main from './components/Main';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Main />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}